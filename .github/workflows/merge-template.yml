name: Merge Template

on:
  workflow_call:
    inputs:
      template-repository:
        description: |
          The template repository to merge into the calling repository. The default is to infer by querying the
          current repository's template repository.
        type: string
        required: false
        default: ''
      labels:
        description: |
          The labels to assign to the new PR, if any, as a stringified JSON array.
        type: string
        default: "[]"
        required: false
    secrets:
      github-pat:
        description: |
          The personal access token used to authenticate for certain operations that cannot be achieved
          with the GitHub Token.
        required: true

permissions:
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  merge-template:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.github-pat }}
      - name: Get PAT credentials
        id: get-pat-credentials
        run: |
          username=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.github-pat }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/user | jq '.login')
          email="${username}@users.noreply.github.com"
          echo "username=${username}" >> "${GITHUB_OUTPUT}"
          echo "email=${username}" >> "${GITHUB_OUTPUT}"
      - name: Infer template repository
        id: infer-template-repository
        run: |
          if [[ -n "${{ inputs.template-repository }}" ]]
          then
            echo "::debug::user provided template repository ${{ inputs.template-repository }}"
            echo "template-repository=${{ inputs.template-repository }}" >> "${GITHUB_OUTPUT}"
            exit 0
          fi
          
          response=$(GH_TOKEN=${{ secrets.github-pat }} gh repo view --json "templateRepository")
          owner=$(echo ${response} | jq -r '.templateRepository.owner.login')
          repo=$(echo ${response} | jq -r '.templateRepository.name')
          template="${owner}/${repo}"
          echo "::debug::inferred template repository to ${template}"
          echo "template-repository=${template}" >> "${GITHUB_OUTPUT}"
      - name: Create template merge branch
        id: merge-template-branch
        run: |
          # Configure git for upcoming commit operations
          git config user.name ${{ steps.get-pat-credentials.outputs.username }}
          git config user.email ${{ steps.get-pat-credentials.outputs.email }}
          
          date=$(date +'%Y-%m-%d')
          branch_name="template-update/${date}"
          
          git remote add template https://github.com/${{ steps.infer-template-repository.outputs.template-repository }}.git
          git fetch --all          
          git checkout -b "${branch_name}"
          
          # If the exit code is 1, we had conflicts.
          exit_code=0
          git merge template/master --allow-unrelated-histories --no-edit || exit_code=$?
          
          # In the event of a conflict, we merge the files that are fine and we create a new commit with conflicting
          # files.
          if [[ $exit_code -ne 0 ]]; then
            mapfile -t unmerged_files < <( git diff --name-only --diff-filter=U --relative )
            # Add the tracked files so we can stash them.
            git add -u
            # Stash them.
            git stash -- "${unmerged_files[@]}"
            # Conclude the merge
            git commit --no-edit
            # Create a commit specific with conflicting files.
            git stash pop
            git add -u
            git commit -m "CONFLICTS"
          fi

          git push origin --force "${branch_name}"
          
          echo "date=${date}" >> "${GITHUB_OUTPUT}"
          echo "branch=${branch_name}" >> "${GITHUB_OUTPUT}"
      # Create pull request using the PAT to trigger pull_request workflows. GITHUB_TOKEN won't trigger
      # these jobs: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#using-the-github_token-in-a-workflow
      - name: Create Pull Request
        id: create-pull-request
        uses: infrastructure-blocks/create-pull-request-action@v1
        with:
          head: ${{ steps.merge-template-branch.outputs.branch }}
          base: master
          title: Update from template - ${{ steps.merge-template.branch.outputs.date }}
          github-token: ${{ secrets.github-pat }}
      - name: Label pull request
        run: |
          labels_length=$(echo '${{ inputs.labels }}' | jq -r '. | length')
          if [[ $labels_length -eq 0 ]]; then
            exit 0
          fi
          
          mapfile -t labels < <(echo '${{ inputs.labels }}' | jq -r .[])
          declare -a labels_args
          for label in "${labels[@]}"
          do
            labels_args+=("--add-label")
            labels_args+=("${label}")
          done
  
          GH_TOKEN=${{ secrets.github-pat }} gh pr edit ${{ fromJson(steps.create-pull-request.outputs.pull-request).number }} --repo ${{ github.repository }} "${labels_args[@]}"
      - name: Turn on auto merge
        uses: infrastructure-blocks/enable-auto-merge-action@v1
        with:
          github-token: ${{ secrets.github-pat }}
          pull-request: ${{ fromJson(steps.create-pull-request.outputs.pull-request).node_id }}
      - name: Approve PR through github actions bot
        run: |
          GH_TOKEN=${{ github.token }} gh pr review ${{ fromJson(steps.create-pull-request.outputs.pull-request).number }} --repo ${{ github.repository }} --approve 
